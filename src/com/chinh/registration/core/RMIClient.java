/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.chinh.registration.core;

import com.toedter.calendar.JTextFieldDateEditor;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.KeyEvent;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Admin
 */
public class RMIClient extends javax.swing.JFrame {

    /**
     * Creates new form Registration_Form
     */
    public RMIClient() {
        initComponents();
        centreWindow(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        genderButtonGroup = new javax.swing.ButtonGroup();
        labelTittle = new javax.swing.JLabel();
        mainPartPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        registrationInforTable = new javax.swing.JTable();
        labelSortByName = new javax.swing.JLabel();
        cmbSortByName = new javax.swing.JComboBox<>();
        btnSearchByName = new javax.swing.JButton();
        txtSearchByName = new javax.swing.JTextField();
        btnGetAllData = new javax.swing.JButton();
        detailedPartPanel = new javax.swing.JPanel();
        labelFullName = new javax.swing.JLabel();
        labelRegistrationID = new javax.swing.JLabel();
        labelBirthday = new javax.swing.JLabel();
        labelGender = new javax.swing.JLabel();
        labelEmail = new javax.swing.JLabel();
        labelPhone = new javax.swing.JLabel();
        labelIDCardNumber = new javax.swing.JLabel();
        labelNationality = new javax.swing.JLabel();
        labelEmergencyContactPerson = new javax.swing.JLabel();
        labelEmergencyContactPhone = new javax.swing.JLabel();
        labelBloodGroup = new javax.swing.JLabel();
        labelMedicalHistory = new javax.swing.JLabel();
        labelAddress = new javax.swing.JLabel();
        labelSportTShirtSize = new javax.swing.JLabel();
        btnAddNew = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtEmergencyContactPhone = new javax.swing.JTextField();
        txtEmergencyContactPerson = new javax.swing.JTextField();
        txtMedicalHistory = new javax.swing.JTextField();
        cmbBloodGroup = new javax.swing.JComboBox<>();
        btnBirthdayChooser = new com.toedter.calendar.JDateChooser();
        txtEmail = new javax.swing.JTextField();
        txtIDCardNumber = new javax.swing.JTextField();
        txtFullName = new javax.swing.JTextField();
        txtRegistrationID = new javax.swing.JTextField();
        btnSearchByRegistrationID = new javax.swing.JButton();
        radioButtonMale = new javax.swing.JRadioButton();
        radioButtonFemale = new javax.swing.JRadioButton();
        txtPhone = new javax.swing.JTextField();
        cmbNationality = new javax.swing.JComboBox<>();
        txtSportTShirtSize = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtAddress = new javax.swing.JTextArea();
        btnUpdate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelTittle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        labelTittle.setForeground(new java.awt.Color(0, 51, 153));
        labelTittle.setText("Sports Event Registration Information Management Software");

        mainPartPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Main part", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N

        registrationInforTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "FullName", "Age", "Gender"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        registrationInforTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                registrationInforTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(registrationInforTable);

        labelSortByName.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        labelSortByName.setText("Sort By Name:");

        cmbSortByName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ASC", "DSC" }));
        cmbSortByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSortByNameActionPerformed(evt);
            }
        });

        btnSearchByName.setText("Search By Name:");
        btnSearchByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByNameActionPerformed(evt);
            }
        });

        txtSearchByName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchByNameKeyTyped(evt);
            }
        });

        btnGetAllData.setText("Get All Data");
        btnGetAllData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetAllDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPartPanelLayout = new javax.swing.GroupLayout(mainPartPanel);
        mainPartPanel.setLayout(mainPartPanelLayout);
        mainPartPanelLayout.setHorizontalGroup(
            mainPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPartPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE)
                    .addGroup(mainPartPanelLayout.createSequentialGroup()
                        .addGroup(mainPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelSortByName)
                            .addComponent(btnSearchByName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(mainPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSearchByName)
                            .addComponent(cmbSortByName, 0, 278, Short.MAX_VALUE)))
                    .addGroup(mainPartPanelLayout.createSequentialGroup()
                        .addComponent(btnGetAllData)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        mainPartPanelLayout.setVerticalGroup(
            mainPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPartPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(mainPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSortByName)
                    .addComponent(cmbSortByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60)
                .addGroup(mainPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchByName)
                    .addComponent(txtSearchByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addComponent(btnGetAllData)
                .addGap(40, 40, 40))
        );

        detailedPartPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Detailed part", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N

        labelFullName.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        labelFullName.setText("Full Name:");

        labelRegistrationID.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        labelRegistrationID.setText("Registration ID:");

        labelBirthday.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        labelBirthday.setText("Birthday:");

        labelGender.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        labelGender.setText("Gender:");

        labelEmail.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        labelEmail.setText("Email:");

        labelPhone.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        labelPhone.setText("Phone:");

        labelIDCardNumber.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        labelIDCardNumber.setText("ID card number:");

        labelNationality.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        labelNationality.setText("Nationality:");

        labelEmergencyContactPerson.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        labelEmergencyContactPerson.setText("Emergency contact person:");

        labelEmergencyContactPhone.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        labelEmergencyContactPhone.setText("Emergency contact phone:");

        labelBloodGroup.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        labelBloodGroup.setText("Blood group:");

        labelMedicalHistory.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        labelMedicalHistory.setText("Medical history:");

        labelAddress.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        labelAddress.setText("Address:");

        labelSportTShirtSize.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        labelSportTShirtSize.setText("Sport T-shirt size:");

        btnAddNew.setText("Add new");
        btnAddNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        txtEmergencyContactPhone.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEmergencyContactPhoneKeyTyped(evt);
            }
        });

        txtEmergencyContactPerson.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEmergencyContactPersonKeyTyped(evt);
            }
        });

        txtMedicalHistory.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMedicalHistoryKeyTyped(evt);
            }
        });

        cmbBloodGroup.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A", "B", "AB", "O" }));

        btnBirthdayChooser.setDateFormatString("yyyy/MM/dd");
        btnBirthdayChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                btnBirthdayChooserPropertyChange(evt);
            }
        });

        txtEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEmailKeyTyped(evt);
            }
        });

        txtIDCardNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIDCardNumberKeyTyped(evt);
            }
        });

        txtFullName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFullNameKeyTyped(evt);
            }
        });

        txtRegistrationID.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtRegistrationIDMouseClicked(evt);
            }
        });
        txtRegistrationID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRegistrationIDKeyTyped(evt);
            }
        });

        btnSearchByRegistrationID.setText("Search");
        btnSearchByRegistrationID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByRegistrationIDActionPerformed(evt);
            }
        });

        genderButtonGroup.add(radioButtonMale);
        radioButtonMale.setSelected(true);
        radioButtonMale.setText("Male");

        genderButtonGroup.add(radioButtonFemale);
        radioButtonFemale.setText("Female");

        txtPhone.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPhoneKeyTyped(evt);
            }
        });

        cmbNationality.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Vietnamese", "American", "Other" }));

        txtSportTShirtSize.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSportTShirtSizeKeyTyped(evt);
            }
        });

        txtAddress.setColumns(20);
        txtAddress.setRows(5);
        txtAddress.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAddressKeyTyped(evt);
            }
        });
        jScrollPane3.setViewportView(txtAddress);

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout detailedPartPanelLayout = new javax.swing.GroupLayout(detailedPartPanel);
        detailedPartPanel.setLayout(detailedPartPanelLayout);
        detailedPartPanelLayout.setHorizontalGroup(
            detailedPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailedPartPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(detailedPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(detailedPartPanelLayout.createSequentialGroup()
                        .addGroup(detailedPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelFullName)
                            .addComponent(labelRegistrationID))
                        .addGap(107, 107, 107)
                        .addGroup(detailedPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(detailedPartPanelLayout.createSequentialGroup()
                                .addComponent(txtRegistrationID, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(64, 64, 64)
                                .addComponent(btnSearchByRegistrationID)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(txtFullName, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)))
                    .addGroup(detailedPartPanelLayout.createSequentialGroup()
                        .addGroup(detailedPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelEmergencyContactPhone)
                            .addComponent(labelEmergencyContactPerson)
                            .addComponent(labelBirthday)
                            .addComponent(labelEmail)
                            .addComponent(labelIDCardNumber))
                        .addGap(28, 28, 28)
                        .addGroup(detailedPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(detailedPartPanelLayout.createSequentialGroup()
                                .addGroup(detailedPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnBirthdayChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                    .addComponent(txtEmail)
                                    .addComponent(txtIDCardNumber, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(52, 52, 52)
                                .addGroup(detailedPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelGender)
                                    .addComponent(labelNationality)
                                    .addComponent(labelPhone))
                                .addGap(18, 18, 18)
                                .addGroup(detailedPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPhone)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, detailedPartPanelLayout.createSequentialGroup()
                                        .addComponent(radioButtonMale)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(radioButtonFemale))
                                    .addComponent(cmbNationality, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(txtEmergencyContactPerson)
                            .addComponent(txtEmergencyContactPhone)))
                    .addGroup(detailedPartPanelLayout.createSequentialGroup()
                        .addGroup(detailedPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelMedicalHistory)
                            .addComponent(labelBloodGroup)
                            .addComponent(labelAddress)
                            .addComponent(labelSportTShirtSize)
                            .addComponent(btnAddNew))
                        .addGap(93, 93, 93)
                        .addGroup(detailedPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(detailedPartPanelLayout.createSequentialGroup()
                                .addComponent(btnSave)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDelete))
                            .addComponent(txtMedicalHistory)
                            .addComponent(txtSportTShirtSize)
                            .addGroup(detailedPartPanelLayout.createSequentialGroup()
                                .addComponent(cmbBloodGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane3))))
                .addContainerGap())
        );
        detailedPartPanelLayout.setVerticalGroup(
            detailedPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailedPartPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(detailedPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelRegistrationID)
                    .addComponent(txtRegistrationID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchByRegistrationID))
                .addGap(25, 25, 25)
                .addGroup(detailedPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelFullName)
                    .addComponent(txtFullName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(detailedPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(detailedPartPanelLayout.createSequentialGroup()
                        .addGroup(detailedPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelGender)
                            .addGroup(detailedPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(labelBirthday)
                                .addComponent(radioButtonFemale)
                                .addComponent(radioButtonMale)))
                        .addGap(25, 25, 25)
                        .addGroup(detailedPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelEmail)
                            .addComponent(labelPhone)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(detailedPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelIDCardNumber)
                            .addComponent(labelNationality)
                            .addComponent(txtIDCardNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbNationality, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(detailedPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelEmergencyContactPerson)
                            .addComponent(txtEmergencyContactPerson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(detailedPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelEmergencyContactPhone)
                            .addComponent(txtEmergencyContactPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(detailedPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelBloodGroup)
                            .addComponent(cmbBloodGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(detailedPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelMedicalHistory)
                            .addComponent(txtMedicalHistory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnBirthdayChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(detailedPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelAddress)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(detailedPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSportTShirtSize)
                    .addComponent(txtSportTShirtSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(detailedPartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddNew)
                    .addComponent(btnSave)
                    .addComponent(btnDelete)
                    .addComponent(btnUpdate))
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(detailedPartPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelTittle)
                .addGap(229, 229, 229))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(labelTittle)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainPartPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(detailedPartPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // validation for registrationID
    private void txtRegistrationIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRegistrationIDKeyTyped
        char c = evt.getKeyChar();
        String registrationID = txtRegistrationID.getText();

        switch (c) {
            case KeyEvent.VK_BACK_SPACE:
                return;
            case KeyEvent.VK_ESCAPE:
                return;
            case KeyEvent.VK_DELETE:
                return;
            case KeyEvent.VK_SPACE:
                evt.consume();
                return;
            case KeyEvent.VK_ENTER:
                return;
            default:
                break;
        }

        int length = (registrationID + c).length();

        if (length > 10) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Registration’s ID field's max length is 10!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        } else if (!Character.isLetterOrDigit(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Registration’s ID field must not contains special characters!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        } else if (Character.isLowerCase(c)) {
            String input = registrationID.toUpperCase();
            txtRegistrationID.setText(input + String.valueOf(c).toUpperCase());
            evt.consume();
        }
    }//GEN-LAST:event_txtRegistrationIDKeyTyped

    // validation for full name
    private void txtFullNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFullNameKeyTyped
        String fullName = txtFullName.getText();
        char c = evt.getKeyChar();

        switch (c) {
            case KeyEvent.VK_BACK_SPACE:
                return;
            case KeyEvent.VK_ESCAPE:
                return;
            case KeyEvent.VK_DELETE:
                return;
            case KeyEvent.VK_SPACE:
                return;
            case KeyEvent.VK_ENTER:
                return;
            default:
                break;
        }       
        
        if ((fullName + c).length() > 50) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Full Name field's max length is 50", "Message", JOptionPane.ERROR_MESSAGE);
        } else if (!Character.isAlphabetic(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Full Name field must only contain letters!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtFullNameKeyTyped

    // validation for birthday
    private void btnBirthdayChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_btnBirthdayChooserPropertyChange
        String birthday = ((JTextField) btnBirthdayChooser.getDateEditor().getUiComponent()).getText();
        DateFormat df = new SimpleDateFormat("yyyy/MM/dd");
        LocalDate today = LocalDate.now();
        Date tmpDate;

        try {
            tmpDate = df.parse(birthday);
            LocalDate birthdate = tmpDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            Period period = Period.between(birthdate, today);
            int age = period.getYears();
            if (age <= 14) {
                JOptionPane.showMessageDialog(this, "Your age must be more than 14 years old to register!", "Message", JOptionPane.ERROR_MESSAGE);
                btnBirthdayChooser.setDate(null);
            } else if (age >= 65) {
                JOptionPane.showMessageDialog(this, "Your age can't be more than 65 years old!", "Message", JOptionPane.ERROR_MESSAGE);
                btnBirthdayChooser.setDate(null);
            }
        } catch (ParseException e) {
            System.out.println(e);
        }

        JTextFieldDateEditor editor = (JTextFieldDateEditor) btnBirthdayChooser.getDateEditor();
        editor.setEditable(false);
    }//GEN-LAST:event_btnBirthdayChooserPropertyChange

    // validation for phone number
    private void txtPhoneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPhoneKeyTyped
        String phone = txtPhone.getText();
        char c = evt.getKeyChar();

        switch (c) {
            case KeyEvent.VK_BACK_SPACE:
                return;
            case KeyEvent.VK_ESCAPE:
                return;
            case KeyEvent.VK_DELETE:
                return;
            case KeyEvent.VK_SPACE:
                evt.consume();
                return;
            case KeyEvent.VK_ENTER:
                return;
            default:
                break;
        }

        if ((phone + c).length() > 15) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Phone field's max length is 15!", "Message", JOptionPane.ERROR_MESSAGE);
        } else if (!Character.isDigit(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Phone field must contain digits (0-9) only!", "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtPhoneKeyTyped

    // validation for idcardnumber
    private void txtIDCardNumberKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIDCardNumberKeyTyped
        String idCardNumber = txtIDCardNumber.getText();
        char c = evt.getKeyChar();

        switch (c) {
            case KeyEvent.VK_BACK_SPACE:
                return;
            case KeyEvent.VK_ESCAPE:
                return;
            case KeyEvent.VK_DELETE:
                return;
            case KeyEvent.VK_SPACE:
                evt.consume();
                return;
            case KeyEvent.VK_ENTER:
                return;
            default:
                break;
        }

        if ((idCardNumber + c).length() > 15) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The ID Card Number's max length is 15!", "Message", JOptionPane.ERROR_MESSAGE);
        } else if (!Character.isDigit(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The ID Card Number must not contain special characters!", "Message",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtIDCardNumberKeyTyped

    // validation for emergency contact person
    private void txtEmergencyContactPersonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmergencyContactPersonKeyTyped
        String emergencyContactPerson = txtEmergencyContactPerson.getText();
        char c = evt.getKeyChar();

        switch (c) {
            case KeyEvent.VK_BACK_SPACE:
                return;
            case KeyEvent.VK_ESCAPE:
                return;
            case KeyEvent.VK_DELETE:
                return;
            case KeyEvent.VK_SPACE:
                return;
            case KeyEvent.VK_ENTER:
                return;
            default:
                break;
        }

        if ((emergencyContactPerson + c).length() > 50) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Emergency Contact Person's max length is 50!", "Message", JOptionPane.ERROR_MESSAGE);
        } else if (!Character.isAlphabetic(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Emergency Contact Person must contain alphabet characters only!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtEmergencyContactPersonKeyTyped

    // validation for emergency contact phone
    private void txtEmergencyContactPhoneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmergencyContactPhoneKeyTyped
        String emergencyContactPhone = txtEmergencyContactPhone.getText();
        char c = evt.getKeyChar();

        switch (c) {
            case KeyEvent.VK_BACK_SPACE:
                return;
            case KeyEvent.VK_ESCAPE:
                return;
            case KeyEvent.VK_DELETE:
                return;
            case KeyEvent.VK_SPACE:
                evt.consume();
                return;
            case KeyEvent.VK_ENTER:
                return;
            default:
                break;
        }

        if ((emergencyContactPhone + c).length() > 15) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Emergency Contact Phone's max length is 15!", "Message", JOptionPane.ERROR_MESSAGE);
        } else if (!Character.isDigit(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Emergency Contact Phone must contain digits(1-9) only!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtEmergencyContactPhoneKeyTyped

    // validation for medical history
    private void txtMedicalHistoryKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMedicalHistoryKeyTyped
        String medicalHistory = txtMedicalHistory.getText();
        char c = evt.getKeyChar();

        switch (c) {
            case KeyEvent.VK_BACK_SPACE:
                return;
            case KeyEvent.VK_ESCAPE:
                return;
            case KeyEvent.VK_DELETE:
                return;
            case KeyEvent.VK_SPACE:
                return;
            case KeyEvent.VK_ENTER:
                return;
            default:
                break;
        }

        if (medicalHistory.length() > 100) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Medical History's max length is 100!!!", "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtMedicalHistoryKeyTyped

    // validation for address
    private void txtAddressKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAddressKeyTyped
        String address = txtAddress.getText();
        char c = evt.getKeyChar();

        switch (c) {
            case KeyEvent.VK_BACK_SPACE:
                return;
            case KeyEvent.VK_ESCAPE:
                return;
            case KeyEvent.VK_DELETE:
                return;
            case KeyEvent.VK_SPACE:
                return;
            case KeyEvent.VK_ENTER:
                return;
            default:
                break;
        }

        String regex = "^[a-zA-Z0-9/ -]*$";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(Character.toString(c));
        boolean isMatch = matcher.find();

        if ((address + c).length() > 150) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Address's max length is 150!", "Message", JOptionPane.ERROR_MESSAGE);
        } else if (!isMatch) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Address field must only contain letters, digits, spaces, dashes (-) and slashes (/)!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtAddressKeyTyped

    // validation for shirt size
    private void txtSportTShirtSizeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSportTShirtSizeKeyTyped
        String shirtSize = txtSportTShirtSize.getText();
        char c = evt.getKeyChar();

        switch (c) {
            case KeyEvent.VK_BACK_SPACE:
                return;
            case KeyEvent.VK_ESCAPE:
                return;
            case KeyEvent.VK_DELETE:
                return;
            case KeyEvent.VK_SPACE:
                evt.consume();
                return;
            case KeyEvent.VK_ENTER:
                return;
            default:
                break;
        }

        int sizeNumber = 0;
        if (Character.isDigit(c)) {
            sizeNumber = Integer.parseInt(String.valueOf(c));

        }

        if ((shirtSize + c).length() > 1) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Sport T-Shirt Size field can contain only 1 digit!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        } else if (!Character.isDigit(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Sport T-Shirt Size field must only contain 1 digit(1-5) only!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        } else if (sizeNumber < 1 || sizeNumber > 5) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "We only offer sizes from 1 to 5!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtSportTShirtSizeKeyTyped

    // clear field prepare to input new information
    private void btnAddNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewActionPerformed
        clearDetailFields();
        txtRegistrationID.setEditable(true);
    }//GEN-LAST:event_btnAddNewActionPerformed

    // save new register information
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        String registrationID = txtRegistrationID.getText().trim();
        String fullName = txtFullName.getText().trim();
        String birthday = ((JTextField) btnBirthdayChooser.getDateEditor().getUiComponent()).getText();
        boolean gender = radioButtonMale.isSelected();
        String email = txtEmail.getText().trim();
        String phone = txtPhone.getText().trim();
        String idCardNumber = txtIDCardNumber.getText().trim();
        String nationality = (String) cmbNationality.getSelectedItem();
        String emergencyContactPerson = txtEmergencyContactPerson.getText().trim();
        String emergencyContactPhone = txtEmergencyContactPhone.getText().trim();
        String bloodGroup = (String) cmbBloodGroup.getSelectedItem();
        String medicalHistory = txtMedicalHistory.getText().trim();
        String address = txtAddress.getText().trim();
        String sportTShirtSize = txtSportTShirtSize.getText().trim();

        int row = registrationInforTable.getSelectedRow();
        if (row != -1) {
            JOptionPane.showMessageDialog(this, "Please click the 'Add New' button to clear detail fields!", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!checkEmptyField()) {
            JOptionPane.showMessageDialog(this, "Please fill out all your information fields before saving the registration!", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!checkLengthAllField()) {
            return;
        }

        if (!checkEmailFormat()) {
            JOptionPane.showMessageDialog(this, "Invalid Email format!", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            Registry registry = LocateRegistry.getRegistry("localhost", 1888);
            RegistrationInterface stub = (RegistrationInterface) registry.lookup("RMIServer");

            Lecturer checkExistedRegistration = stub.findByRegistrationID(registrationID);
            if (checkExistedRegistration.getRegistrationID() != null) {
                JOptionPane.showMessageDialog(this, "The registration ID already exists! Please choose a different ID.", "Message", JOptionPane.ERROR_MESSAGE);
                return;
            }

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
            Date parsedBirthday = sdf.parse(birthday);

            int shirtSize = Integer.parseInt(sportTShirtSize);
            Lecturer dto = new Lecturer(registrationID, fullName, parsedBirthday, gender, email,
                    phone, idCardNumber, nationality, emergencyContactPerson, emergencyContactPhone,
                    bloodGroup, medicalHistory, address, shirtSize);

            if (stub.createRegistration(dto) == true) {
                JOptionPane.showMessageDialog(this, "Create new registration successfully", "Message", JOptionPane.INFORMATION_MESSAGE);
                reloadTableForSaveAction();
                clearDetailFields();
            } else {
                JOptionPane.showMessageDialog(this, "Create new registration failed!", "Message", JOptionPane.ERROR_MESSAGE);
            }
        } catch (RemoteException | NotBoundException | ParseException e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    // update registration
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        String registrationID = txtRegistrationID.getText().trim();
        String fullName = txtFullName.getText().trim();
        String birthday = ((JTextField) btnBirthdayChooser.getDateEditor().getUiComponent()).getText();
        boolean gender = radioButtonMale.isSelected();
        String email = txtEmail.getText().trim();
        String phone = txtPhone.getText().trim();
        String idCardNumber = txtIDCardNumber.getText().trim();
        String nationality = (String) cmbNationality.getSelectedItem();
        String emergencyContactPerson = txtEmergencyContactPerson.getText().trim();
        String emergencyContactPhone = txtEmergencyContactPhone.getText().trim();
        String bloodGroup = (String) cmbBloodGroup.getSelectedItem();
        String medicalHistory = txtMedicalHistory.getText().trim();
        String address = txtAddress.getText().trim();
        String sportTShirtSize = txtSportTShirtSize.getText().trim();
        int row = registrationInforTable.getSelectedRow();

        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row in table to update!", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!checkEmptyField()) {
            JOptionPane.showMessageDialog(this, "Please fill out all your information fields before saving the registration!", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (!checkLengthAllField()) {
            return;
        }

        if (!checkEmailFormat()) {
            JOptionPane.showMessageDialog(this, "Invalid Email format!", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            Registry registry = LocateRegistry.getRegistry("localhost", 1888);
            RegistrationInterface stub = (RegistrationInterface) registry.lookup("RMIServer");

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
            Date parsedBirthday = sdf.parse(birthday);
            int shirtSize = Integer.parseInt(sportTShirtSize);
            Lecturer dto = new Lecturer(registrationID, fullName, parsedBirthday, gender, email,
                    phone, idCardNumber, nationality, emergencyContactPerson, emergencyContactPhone,
                    bloodGroup, medicalHistory, address, shirtSize);

            if (stub.updateRegistration(dto)) {
                String action = "update";
                reloadTable(action);
                getRegistrationByID(registrationID);
                JOptionPane.showMessageDialog(this, "Update registration successfully", "Message", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Update new registration failed!", "Message", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NotBoundException | ParseException e) {
            System.out.println(e.getMessage());
        } catch (RemoteException e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(this, "Can not connect to server!", "Disconnect", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    // delete registration
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int row = registrationInforTable.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row in table to delete!", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String registrationID = registrationInforTable.getValueAt(row, 0).toString();

        Registry registry;
        try {
            registry = LocateRegistry.getRegistry("localhost", 1888);
            RegistrationInterface stub = (RegistrationInterface) registry.lookup("RMIServer");
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure to delete this registration", "Confirm Message", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                if (stub.removeRegistration(registrationID)) {
                    String action = "delete";
                    reloadTable(action);
                    clearDetailFields();
                    JOptionPane.showMessageDialog(this, "Delete registration successfully", "Message", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Delete registration failed!", "Message", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (NotBoundException | AccessException e) {
            System.out.println(e.getMessage());
        } catch (RemoteException e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(this, "Cannot connect to the server!", "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    // find then return and set registration information into detailed part
    private void btnSearchByRegistrationIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByRegistrationIDActionPerformed
        String registrationID = txtRegistrationID.getText().trim();
        reloadTableForSaveAction();
        if (registrationInforTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "The table is empty! Please click 'Get All Data' button to fill data into the table.", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (registrationID.equals("")) {
            JOptionPane.showMessageDialog(this, "Please input RegistrationID to search!", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        boolean searchResult = getRegistrationByID(registrationID);
        if (searchResult) {
            registrationInforTable.clearSelection();
            for (int i = 0; i < registrationInforTable.getRowCount(); i++) {
                String registrationIDTable = (String) registrationInforTable.getValueAt(i, 0);
                if (registrationID.equals(registrationIDTable)) {
                    registrationInforTable.setRowSelectionInterval(i, i);
                    txtRegistrationID.setEditable(false);
                    break;
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "No registration was found with the ID: " + registrationID, "Registration Not Found", JOptionPane.ERROR_MESSAGE);
            clearDetailFields();
        }
    }//GEN-LAST:event_btnSearchByRegistrationIDActionPerformed

    // load all registration information in notepad into registration table
    private void btnGetAllDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetAllDataActionPerformed
        Registry registry;
        try {
            registry = LocateRegistry.getRegistry("localhost", 1888);
            RegistrationInterface stub = (RegistrationInterface) registry.lookup("RMIServer");
            ArrayList<Lecturer> dataList = stub.findAllRegistration();

            if (dataList.isEmpty()) {
                JOptionPane.showMessageDialog(this, "The registration data is empty! No registrations created yet!", "Message", JOptionPane.ERROR_MESSAGE);
                return;
            }

            DefaultTableModel model = (DefaultTableModel) registrationInforTable.getModel();

            model.setRowCount(0);
            registrationInforTable.setRowSorter(null);
            clearDetailFields();
            txtRegistrationID.setEditable(true);
            
            for (Lecturer data : dataList) {
                SimpleDateFormat df = new SimpleDateFormat("yyyy/MM/dd");
                String birthday = df.format(data.getBirthday());
                LocalDate today = LocalDate.now();
                Date tmpDate = df.parse(birthday);
                LocalDate birthdate = tmpDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                Period period = Period.between(birthdate, today);
                int age = period.getYears();

                model.addRow(new Object[]{
                    data.getRegistrationID(), data.getFullName(), age, data.isGender() == true ? "Male" : "Female"});
            }
        } catch (NotBoundException | ParseException e) {
            System.out.println(e.getMessage());
        } catch (RemoteException e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(this, "Cannot connect to the server!", "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnGetAllDataActionPerformed

    // click a row on registration table and data will auto fill into detailed part
    private void registrationInforTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_registrationInforTableMouseClicked
        int row = registrationInforTable.getSelectedRow();
        String registrationID = registrationInforTable.getValueAt(row, 0).toString();
        if (row != -1) {
            txtRegistrationID.setEditable(false);
        }
        getRegistrationByID(registrationID);
    }//GEN-LAST:event_registrationInforTableMouseClicked

    // search by lecturer name
    private void btnSearchByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByNameActionPerformed
        clearDetailFields();
        txtRegistrationID.setEditable(true);

        if (registrationInforTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "The table is empty! Please click 'Get All Data' button to fill data into the table.", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String searchNameValue = txtSearchByName.getText().trim();
        if (searchNameValue.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please input a lecturer name to search!", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Registry registry;
        try {
            registry = LocateRegistry.getRegistry("localhost", 1888);
            RegistrationInterface stub = (RegistrationInterface) registry.lookup("RMIServer");
            ArrayList<Lecturer> dataList = stub.findAllRegistration();
            if (dataList == null) {
                JOptionPane.showMessageDialog(this, "The registration data is empty! No registrations created yet!", "Message", JOptionPane.ERROR_MESSAGE);
                return;
            }
            ArrayList<Lecturer> matchingDataList = new ArrayList<>();
            for (Lecturer o : dataList) {
                if (o.getFullName().toLowerCase().contains(searchNameValue.toLowerCase())) {
                    matchingDataList.add(o);
                }
            }
            if (matchingDataList.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No registrations found for the given name!", "Message", JOptionPane.ERROR_MESSAGE);
                return;
            }
            reloadTableBySearchName(matchingDataList);
        } catch (NotBoundException e) {
            System.out.println(e.getMessage());
        } catch (RemoteException e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(this, "Cannot connect to the server!", "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSearchByNameActionPerformed

    // sort table by lecturer name by ascending or descending
    private void cmbSortByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSortByNameActionPerformed
        if (registrationInforTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "The table is empty! Please click 'Get All Data' button to fill data into the table.", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String sortType = (String) cmbSortByName.getSelectedItem();
        DefaultTableModel model = (DefaultTableModel) registrationInforTable.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        registrationInforTable.setRowSorter(sorter);

        if (sortType.equalsIgnoreCase("asc")) {
            List<RowSorter.SortKey> sortKeys = new ArrayList<>();
            sortKeys.add(new RowSorter.SortKey(1, SortOrder.ASCENDING));
            sorter.setSortKeys(sortKeys);
            sorter.sort();
        } else {
            List<RowSorter.SortKey> sortKeys = new ArrayList<>();
            sortKeys.add(new RowSorter.SortKey(1, SortOrder.DESCENDING));
            sorter.setSortKeys(sortKeys);
            sorter.sort();
        }
        clearDetailFields();
    }//GEN-LAST:event_cmbSortByNameActionPerformed

    // validation for search by name input
    private void txtSearchByNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchByNameKeyTyped
        String searchValue = txtSearchByName.getText();
        char c = evt.getKeyChar();

        switch (c) {
            case KeyEvent.VK_BACK_SPACE:
                return;
            case KeyEvent.VK_ESCAPE:
                return;
            case KeyEvent.VK_DELETE:
                return;
            case KeyEvent.VK_SPACE:
                return;
            case KeyEvent.VK_ENTER:
                return;
            default:
                break;
        }

        if ((searchValue + c).length() > 50) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Search Value field's max length is 50", "Message", JOptionPane.ERROR_MESSAGE);
        } else if (!Character.isAlphabetic(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Search Value's field must only contain letters!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtSearchByNameKeyTyped

    // registration id mouse click, show message editable status
    private void txtRegistrationIDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtRegistrationIDMouseClicked
        boolean checkEditable = txtRegistrationID.isEditable();
        if (!checkEditable) {
            JOptionPane.showMessageDialog(this, "You cannot edit this field at this time! Please click the 'Add New' button to enable editing.", "Messagage",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_txtRegistrationIDMouseClicked

    // validation for email
    private void txtEmailKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmailKeyTyped
        String email = txtEmail.getText();
        char c = evt.getKeyChar();

        switch (c) {
            case KeyEvent.VK_BACK_SPACE:
                return;
            case KeyEvent.VK_ESCAPE:
                return;
            case KeyEvent.VK_DELETE:
                return;
            case KeyEvent.VK_SPACE:
                evt.consume();
                return;
            case KeyEvent.VK_ENTER:
                return;
            default:
                break;
        }

        int length = (email + c).length();

        if (length > 64) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Email field's max length is 64!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtEmailKeyTyped

    // check email format
    private boolean checkEmailFormat() {
        String email = txtEmail.getText();
        String regex = "^[A-Za-z0-9_]+@gmail\\.com$";
        Pattern patern = Pattern.compile(regex);
        Matcher matcher = patern.matcher(email);
        return matcher.matches();
    }

    // check field if any field empty return true else return false
    private boolean checkEmptyField() {
        String[] fields = {txtRegistrationID.getText(), txtFullName.getText(),
            ((JTextField) btnBirthdayChooser.getDateEditor().getUiComponent()).getText(),
            txtEmail.getText(), txtPhone.getText(), txtIDCardNumber.getText(),
            txtEmergencyContactPerson.getText(), txtEmergencyContactPhone.getText(),
            txtMedicalHistory.getText(), txtAddress.getText(), txtSportTShirtSize.getText()};

        for (String field : fields) {
            if (field.isEmpty()) {
                return false;
            }
        }
        return true;
    }

    // reload table after data changed
    private void reloadTable(String action) {
        Registry registry;
        try {
            registry = LocateRegistry.getRegistry("localhost", 1888);
            RegistrationInterface stub = (RegistrationInterface) registry.lookup("RMIServer");
            ArrayList<Lecturer> dataList = stub.findAllRegistration();

            DefaultTableModel model = (DefaultTableModel) registrationInforTable.getModel();
            int row = registrationInforTable.getSelectedRow();
            if (row == -1) {
                return;
            }
            String registrationID = (String) registrationInforTable.getValueAt(row, 0);
            model.setRowCount(0);
            for (Lecturer data : dataList) {
                SimpleDateFormat df = new SimpleDateFormat("yyyy/MM/dd");
                String birthday = df.format(data.getBirthday());
                LocalDate today = LocalDate.now();
                Date tmpDate = df.parse(birthday);
                LocalDate birthdate = tmpDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                Period period = Period.between(birthdate, today);
                int age = period.getYears();

                model.addRow(new Object[]{
                    data.getRegistrationID(), data.getFullName(), age, data.isGender() == true ? "Male" : "Female"});
            }

            int rowCount = registrationInforTable.getRowCount();
            if (rowCount < 1) {
                return;
            }

            if (action.equals("update") || action.equals("delete")) {
                for (int i = 0; i < registrationInforTable.getRowCount(); i++) {
                    if (registrationInforTable.getValueAt(i, 0).equals(registrationID)) {
                        registrationInforTable.setRowSelectionInterval(i, i);
                    }
                }
            }
        } catch (RemoteException | NotBoundException | ParseException e) {
            System.out.println(e);
        }
    }

    // reload table after save
    private void reloadTableForSaveAction() {
        Registry registry;
        try {
            registry = LocateRegistry.getRegistry("localhost", 1888);
            RegistrationInterface stub = (RegistrationInterface) registry.lookup("RMIServer");
            ArrayList<Lecturer> dataList = stub.findAllRegistration();

            DefaultTableModel model = (DefaultTableModel) registrationInforTable.getModel();
            model.setRowCount(0);
            for (Lecturer data : dataList) {
                SimpleDateFormat df = new SimpleDateFormat("yyyy/MM/dd");
                String birthday = df.format(data.getBirthday());
                LocalDate today = LocalDate.now();
                Date tmpDate = df.parse(birthday);
                LocalDate birthdate = tmpDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                Period period = Period.between(birthdate, today);
                int age = period.getYears();

                model.addRow(new Object[]{
                    data.getRegistrationID(), data.getFullName(), age, data.isGender() == true ? "Male" : "Female"});
            }
        } catch (RemoteException | NotBoundException | ParseException e) {
            System.out.println(e);
        }
    }

    // find registration by id then set regis infor in detailed part
    private boolean getRegistrationByID(String registrationID) {
        Registry registry;
        try {
            registry = LocateRegistry.getRegistry("localhost", 1888);
            RegistrationInterface stub = (RegistrationInterface) registry.lookup("RMIServer");
            Lecturer lecturer = stub.findByRegistrationID(registrationID);
            if (lecturer.getRegistrationID() != null) {
                txtRegistrationID.setText(registrationID);
                txtFullName.setText(lecturer.getFullName());
                btnBirthdayChooser.setDate(lecturer.getBirthday());
                txtEmail.setText(lecturer.getEmail());
                txtPhone.setText(lecturer.getPhone());
                txtIDCardNumber.setText(lecturer.getIdCardNumber());
                txtEmergencyContactPerson.setText(lecturer.getEmergencyContactPerson());
                txtEmergencyContactPhone.setText(lecturer.getEmergencyContactPhone());
                txtMedicalHistory.setText(lecturer.getMedicalHistory());
                txtAddress.setText(lecturer.getAddress());
                String shirtSize = String.valueOf(lecturer.getSportTshirtSize());
                txtSportTShirtSize.setText(shirtSize);

                boolean gender = lecturer.isGender();
                if (gender == true) {
                    radioButtonMale.setSelected(true);
                } else {
                    radioButtonFemale.setSelected(true);
                }

                int i = 0;
                while (true) {
                    String nationalityFromCmb = cmbNationality.getItemAt(i);
                    if (nationalityFromCmb.equalsIgnoreCase(lecturer.getNationality())) {
                        cmbNationality.setSelectedIndex(i);
                        break;
                    }
                    i++;
                }

                i = 0;
                while (true) {
                    String bloobGroupFromCmb = cmbBloodGroup.getItemAt(i);
                    if (bloobGroupFromCmb.equalsIgnoreCase(lecturer.getBloodGroup())) {
                        cmbBloodGroup.setSelectedIndex(i);
                        break;
                    }
                    i++;
                }
            } else {
                return false;
            }
        } catch (RemoteException | NotBoundException e) {
            System.out.println(e.getMessage());
        }
        return true;
    }

    // clear all detail data
    private void clearDetailFields() {
        txtRegistrationID.setText("");
        txtFullName.setText("");
        btnBirthdayChooser.setDate(null);
        radioButtonMale.setSelected(true);
        txtEmail.setText("");
        txtPhone.setText("");
        txtIDCardNumber.setText("");
        cmbNationality.setSelectedIndex(0);
        txtEmergencyContactPerson.setText("");
        txtEmergencyContactPhone.setText("");
        cmbBloodGroup.setSelectedIndex(0);
        txtMedicalHistory.setText("");
        txtAddress.setText("");
        txtSportTShirtSize.setText("");
        registrationInforTable.clearSelection();
    }

    // reload table after search by name, value input and button click
    private void reloadTableBySearchName(ArrayList<Lecturer> dataList) {
        try {
            DefaultTableModel model = (DefaultTableModel) registrationInforTable.getModel();
            model.setRowCount(0);
            for (Lecturer data : dataList) {
                SimpleDateFormat df = new SimpleDateFormat("yyyy/MM/dd");
                String birthday = df.format(data.getBirthday());
                LocalDate today = LocalDate.now();
                Date tmpDate = df.parse(birthday);
                LocalDate birthdate = tmpDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                Period period = Period.between(birthdate, today);
                int age = period.getYears();

                model.addRow(new Object[]{
                    data.getRegistrationID(), data.getFullName(), age, data.isGender() == true ? "Male" : "Female"});
            }
        } catch (ParseException e) {
            System.out.println(e.getMessage());
        }
    }
    
    // check shortest length for all field
    private boolean checkLengthAllField() {
        String registrationID = txtRegistrationID.getText();
        String fullName = txtFullName.getText().trim();
        String email = txtEmail.getText();
        String phone = txtPhone.getText();
        String idCardNumber = txtIDCardNumber.getText();
        String emergencyContactPerson = txtEmergencyContactPerson.getText().trim();
        String emergencyContactPhone = txtEmergencyContactPhone.getText();
        String address = txtAddress.getText().trim();

        boolean check = true;
        if (registrationID.length() < 5) {
            JOptionPane.showMessageDialog(this, "The RegistrationID must be at least 5 characters long!", "Message",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (fullName.length() < 3) {
            JOptionPane.showMessageDialog(this, "The FullName must be at least 3 characters long!", "Message",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (email.length() < 11) {
            JOptionPane.showMessageDialog(this, "The Email must be at least 11 characters long!", "Message",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (phone.length() < 10) {
            JOptionPane.showMessageDialog(this, "The Phone must be at least 10 characters long!", "Message",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (idCardNumber.length() < 10) {
            JOptionPane.showMessageDialog(this, "The ID Card Number must be at least 10 characters long!", "Message",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (emergencyContactPerson.length() < 3) {
            JOptionPane.showMessageDialog(this, "The Emergency Contact Person must be at least 3 characters long!", "Message",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (emergencyContactPhone.length() < 10) {
            JOptionPane.showMessageDialog(this, "The Emergency Contact Phone must be at least 10 characters long!", "Message",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (address.length() < 5) {
            JOptionPane.showMessageDialog(this, "The Address must be at least 5 characters long!", "Message",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return check;
    }

    // center form 
    public static void centreWindow(Window frame) {
        Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((dimension.getWidth() - frame.getWidth()) / 2);
        int y = (int) ((dimension.getHeight() - frame.getHeight()) / 2);
        frame.setLocation(x, y);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RMIClient.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RMIClient.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RMIClient.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RMIClient.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RMIClient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNew;
    private com.toedter.calendar.JDateChooser btnBirthdayChooser;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnGetAllData;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearchByName;
    private javax.swing.JButton btnSearchByRegistrationID;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbBloodGroup;
    private javax.swing.JComboBox<String> cmbNationality;
    private javax.swing.JComboBox<String> cmbSortByName;
    private javax.swing.JPanel detailedPartPanel;
    private javax.swing.ButtonGroup genderButtonGroup;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labelAddress;
    private javax.swing.JLabel labelBirthday;
    private javax.swing.JLabel labelBloodGroup;
    private javax.swing.JLabel labelEmail;
    private javax.swing.JLabel labelEmergencyContactPerson;
    private javax.swing.JLabel labelEmergencyContactPhone;
    private javax.swing.JLabel labelFullName;
    private javax.swing.JLabel labelGender;
    private javax.swing.JLabel labelIDCardNumber;
    private javax.swing.JLabel labelMedicalHistory;
    private javax.swing.JLabel labelNationality;
    private javax.swing.JLabel labelPhone;
    private javax.swing.JLabel labelRegistrationID;
    private javax.swing.JLabel labelSortByName;
    private javax.swing.JLabel labelSportTShirtSize;
    private javax.swing.JLabel labelTittle;
    private javax.swing.JPanel mainPartPanel;
    private javax.swing.JRadioButton radioButtonFemale;
    private javax.swing.JRadioButton radioButtonMale;
    private javax.swing.JTable registrationInforTable;
    private javax.swing.JTextArea txtAddress;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtEmergencyContactPerson;
    private javax.swing.JTextField txtEmergencyContactPhone;
    private javax.swing.JTextField txtFullName;
    private javax.swing.JTextField txtIDCardNumber;
    private javax.swing.JTextField txtMedicalHistory;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtRegistrationID;
    private javax.swing.JTextField txtSearchByName;
    private javax.swing.JTextField txtSportTShirtSize;
    // End of variables declaration//GEN-END:variables
}
